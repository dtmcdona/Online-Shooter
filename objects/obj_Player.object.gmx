<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables and create objs
blueScore = 0
redScore = 0
firstSpawn = true
bot = false
botPrevHP = 100
botMove = true;
botStep = 0;//backtrack step
randomize();
randomAngle = random_range(-10,10) 
backtrack = random_range(120,240);
preX = x
preY = y 
shooting = false;
hp = 0;
range = 1200;
target = -1;
pointDir = 0;
runSpeed = 4;
teamBlue = 1;
kills = 0;
deaths  = 0;
prevKills = kills;
with(obj_splashScreen) instance_destroy();
instance_create(800,64,obj_score);
instance_create(800,128,obj_KD);
instance_create(800,192,obj_bulletsInfo);
//instance_create(0, 0, obj_mapColliders)
spawn_point(obj_Player);
alarm[0] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check if bot stuck
if(bot)
{
    if(distance_to_point(preX,preY)&lt;10)
        botstep = 1000;
    preX = x
    preY = y 
}
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vision
///raycast lines range 20
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+20),lengthdir_y(range,(image_angle+15)+20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-20),lengthdir_y(range,(image_angle+15)-20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-20),lengthdir_y(range,(image_angle+15)+20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 15
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+15),lengthdir_y(range,(image_angle+15)-15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+15),lengthdir_y(range,(image_angle+15)+15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-15),lengthdir_y(range,(image_angle+15)-15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-15),lengthdir_y(range,(image_angle+15)+15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 10
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+10),lengthdir_y(range,(image_angle+15)-10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+10),lengthdir_y(range,(image_angle+15)+10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-10),lengthdir_y(range,(image_angle+15)-10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-10),lengthdir_y(range,(image_angle+15)+10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 5
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+5),lengthdir_y(range,(image_angle+15)-5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+5),lengthdir_y(range,(image_angle+15)+5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-5),lengthdir_y(range,(image_angle+15)-5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)-5),lengthdir_y(range,(image_angle+15)+5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
//main line to mouse coord
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)),lengthdir_y(range,(image_angle+15)),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}







///raycast lines range 20
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+20),lengthdir_y(range,(image_angle-15)-20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+20),lengthdir_y(range,(image_angle-15)+20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-20),lengthdir_y(range,(image_angle-15)-20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-20),lengthdir_y(range,(image_angle-15)+20),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 15
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+15),lengthdir_y(range,(image_angle-15)-15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+15),lengthdir_y(range,(image_angle-15)+15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-15),lengthdir_y(range,(image_angle-15)-15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-15),lengthdir_y(range,(image_angle-15)+15),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 10
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+10),lengthdir_y(range,(image_angle-15)-10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+10),lengthdir_y(range,(image_angle-15)+10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-10),lengthdir_y(range,(image_angle-15)-10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-10),lengthdir_y(range,(image_angle-15)+10),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
///raycast lines range 5
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+5),lengthdir_y(range,(image_angle-15)-5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        seen = true
        target.visible = true
    }
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)+5),lengthdir_y(range,(image_angle-15)+5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-5),lengthdir_y(range,(image_angle-15)-5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)-5),lengthdir_y(range,(image_angle-15)+5),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
//main line to mouse coord
target = collision_line(x,y,lengthdir_x(range,(image_angle-15)),lengthdir_y(range,(image_angle-15)),obj_OtherClient,false,true)
if (instance_exists(target))
{
    if (!collision_line(x,y,target.x,target.y,obj_mapColliders,true,true))
    {
        //I see the other client
        target.visible = true
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bot, move, anim, and death
//death
//BOT script
global.hp = hp
if(hp &gt; 100)
    hp = 100;
//bot hit so backtrack for enemy
if(bot &amp;&amp; hp &lt; botPrevHP &amp;&amp; !instance_exists(target))
    pointDir = image_angle-180
if(obj_client.reloading)
    botStep = 1000
botPrevHP = hp

//bot back track
target = collision_line(x,y,lengthdir_x(range,(image_angle+15)+20),lengthdir_y(range,(image_angle+15)-20),obj_OtherClient,false,true)
if(bot)
{
    botStep++
    if(botStep &gt; backtrack)
    {
        with(obj_usedWayPoint) instance_change(obj_wayPoint,true);
        randomize();
        backtrack = random_range(120,240);
        botStep = 0;
    }
}
//bot find target is so then stop moving
if(instance_exists(target))
{
    if(target.visible = true &amp;&amp; target.teamBlue != teamBlue)
    
        botMove = false
}
else
{
    botMove = true
}
if(bot &amp;&amp; !botMove)
{
    //////fire at enemy////////////
    if (target.teamBlue != teamBlue)
    {
        randomize();
        randomAngle = random_range(-8,8);   
        image_angle = point_direction(x,y,target.x,target.y)
        pointDir = image_angle+randomAngle;
        with(obj_client)
        {
            if(canShoot &amp;&amp; !reloading)
            {
                var dir = round(obj_Player.pointDir);
                client_send_shoot(dir);
                numBullets--;
                canShoot = false;
            }
        }
    }  
}
if(bot &amp;&amp; botMove)
{
    randx = random_range(-10,10)
    randy = random_range(-10,10)
    checkpoint = instance_nearest(x+randx,y+randy,obj_wayPoint)
    image_angle = point_direction(x,y,checkpoint.x,checkpoint.y)
    pointDir = image_angle;
    for(a = 0;a&lt;4;a++)
    {
      if(checkpoint.x &gt; x)
      {
        x++;
      }
      else if(checkpoint.x &lt; x)
      {
        x--;
      }
      if(checkpoint.y &gt; y)
      {
        y++;
      }
      else if(checkpoint.y &lt; y)
      {
        y--;
      }
    }
}
else if(!bot)//player script
{
    var xDir = keyboard_check(ord('D')) - keyboard_check(ord('A'));
    var yDir = keyboard_check(ord('S')) - keyboard_check(ord('W'));
    x += xDir*runSpeed;
    y += yDir*runSpeed;
    //image angle
    pointDir = point_direction(x,y,mouse_x,mouse_y)
    image_angle = pointDir;
}

///animations
if(obj_client.reloading &amp;&amp; hp &gt; 0)
{
    image_speed = .25
    if(image_index &lt; 4 &amp;&amp; image_index &lt; 8)
        image_index = 4;
}
else if(teamBlue = 1 &amp;&amp; !shooting &amp;&amp; hp &gt; 0 &amp;&amp; !obj_client.reloading)
{
    sprite_index = spr_blue
    image_speed = 0
}
else if(teamBlue = 0 &amp;&amp; !shooting &amp;&amp; hp &gt; 0 &amp;&amp; !obj_client.reloading)
{
    sprite_index = spr_red
    image_speed = 0
}
else if(shooting &amp;&amp; hp &gt; 0 &amp;&amp; !obj_client.reloading)
{
    image_speed = .5
    if(image_index = 3)
    {
        shooting = false;
        image_index = 0;
        image_speed = 0;
    }
}
if(hp &gt; 0 &amp;&amp; image_index &gt; 7)
{
        image_index = 0;
        image_speed = 0;
}
if(hp &lt;= 0)
{
    obj_client.numBullets = obj_client.maxBullets
}
spawn_point(obj_Player);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scores
if(kills &gt; prevKills)
{
    if(teamBlue = 1)
        blueScore++
    else
        redScore++
}
prevKills = kills
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self and health bar
draw_self();
draw_healthbar(x-16,y-20,x+16,y-18,hp,c_white,c_red,c_green,0,false,false);
draw_set_color(c_white);
//collision lines
if(bot)
{
draw_set_alpha(.2);
draw_line(x,y,lengthdir_x(range,(image_angle+15)+20),lengthdir_y(range,(image_angle+15)-20));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+20),lengthdir_y(range,(image_angle+15)+20));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-20),lengthdir_y(range,(image_angle+15)-20));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-20),lengthdir_y(range,(image_angle+15)+20));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+15),lengthdir_y(range,(image_angle+15)-15));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+15),lengthdir_y(range,(image_angle+15)+15));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-15),lengthdir_y(range,(image_angle+15)-15));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-15),lengthdir_y(range,(image_angle+15)+15));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+10),lengthdir_y(range,(image_angle+15)-10));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+10),lengthdir_y(range,(image_angle+15)+10));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-10),lengthdir_y(range,(image_angle+15)-10));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-10),lengthdir_y(range,(image_angle+15)+10));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+5),lengthdir_y(range,(image_angle+15)-5));
draw_line(x,y,lengthdir_x(range,(image_angle+15)+5),lengthdir_y(range,(image_angle+15)+5));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-5),lengthdir_y(range,(image_angle+15)-5));
draw_line(x,y,lengthdir_x(range,(image_angle+15)-5),lengthdir_y(range,(image_angle+15)+5));
draw_line(x,y,lengthdir_x(range,(image_angle+15)),lengthdir_y(range,(image_angle+15)));
/////////////////////////////-15_/////////////////////
draw_line(x,y,lengthdir_x(range,(image_angle-15)+20),lengthdir_y(range,(image_angle-15)-20));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+20),lengthdir_y(range,(image_angle-15)+20));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-20),lengthdir_y(range,(image_angle-15)-20));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-20),lengthdir_y(range,(image_angle-15)+20));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+15),lengthdir_y(range,(image_angle-15)-15));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+15),lengthdir_y(range,(image_angle-15)+15));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-15),lengthdir_y(range,(image_angle-15)-15));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-15),lengthdir_y(range,(image_angle-15)+15));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+10),lengthdir_y(range,(image_angle-15)-10));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+10),lengthdir_y(range,(image_angle-15)+10));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-10),lengthdir_y(range,(image_angle-15)-10));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-10),lengthdir_y(range,(image_angle-15)+10));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+5),lengthdir_y(range,(image_angle-15)-5));
draw_line(x,y,lengthdir_x(range,(image_angle-15)+5),lengthdir_y(range,(image_angle-15)+5));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-5),lengthdir_y(range,(image_angle-15)-5));
draw_line(x,y,lengthdir_x(range,(image_angle-15)-5),lengthdir_y(range,(image_angle-15)+5));
draw_line(x,y,lengthdir_x(range,(image_angle-15)),lengthdir_y(range,(image_angle-15)));
draw_set_alpha(1);
}
//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
